name: Deploy to Production and Development

on:
  push:
    branches:
      - main  # Deploys to production
      - dev   # Deploys to development
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Generate version
      id: version
      run: |
        TZ=Europe/Berlin date +'%Y.%m.%d.%H%M'
        echo "BUILD_VERSION=$(TZ=Europe/Berlin date +'%Y.%m.%d.%H%M')-${GITHUB_SHA::7}" >> $GITHUB_ENV
    
    # Determine environment
    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "SSH_HOST=89.47.162.7" >> $GITHUB_ENV
          echo "SSH_USER=ubuntu" >> $GITHUB_ENV
          echo "DEPLOY_PATH=~/apps/hfss_live" >> $GITHUB_ENV
          echo "BRANCH=main" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "SSH_HOST=ssh.hikeandfly.app" >> $GITHUB_ENV
          echo "SSH_USER=${{ secrets.DEV_SSH_USERNAME }}" >> $GITHUB_ENV
          echo "DEPLOY_PATH=~/apps/hfss_dev" >> $GITHUB_ENV
          echo "BRANCH=dev" >> $GITHUB_ENV
        fi
    
    # Deploy to production (direct SSH)
    - name: Deploy to production
      if: env.ENVIRONMENT == 'production'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ secrets.TIME4VPS }}
        script: |
          export HOSTNAME=$(hostname)
          cd ${{ env.DEPLOY_PATH }}
          git pull origin ${{ env.BRANCH }}
          docker-compose down
          docker-compose up -d --build
          echo "Deployed successfully to production on host $HOSTNAME"
    
    # For development environment with Cloudflare Access
    - name: Setup cloudflared (for development)
      if: env.ENVIRONMENT == 'development'
      uses: AnimMouse/setup-cloudflared@v2
    
    - name: Deploy to development with service tokens
      if: env.ENVIRONMENT == 'development'
      run: |
        # Verify cloudflared installation
        cloudflared -v
        
        # Set up SSH key
        mkdir -p ~/.ssh
        echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Use cloudflared directly with explicit service token arguments
        # Create a script that will be executed on the remote server
        cat > deploy_commands.sh << 'EOF'
        export HOSTNAME=$(hostname)
        cd ${{ env.DEPLOY_PATH }}
        git pull origin ${{ env.BRANCH }}
        docker-compose down
        docker-compose up -d --build
        echo "Deployed successfully to development on host $HOSTNAME"
        EOF
        
        # Use cloudflared access ssh command with explicit service token flags
        cloudflared access ssh --hostname ${{ env.SSH_HOST }} \
          --id ${{ secrets.CLOUDFLARE_ACCESS_CLIENT_ID }} \
          --secret ${{ secrets.CLOUDFLARE_ACCESS_CLIENT_SECRET }} \
          -- ${{ env.SSH_USER }}@${{ env.SSH_HOST }} 'bash -s' < deploy_commands.sh